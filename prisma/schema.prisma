generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum platform_type {
  kakao
  naver
  google
}

enum notice_type {
  post
  comment
  friend
}
enum like_post_type {
  shared_planner
  post
}
enum moment_story_type {
  moment
  story
}

enum share_status {
  public
  friend
  draft
}

enum align_type {
  left
  center
  right
}

enum story_content_type {
  image
  video
}
enum user_type {
  category_user
  memo_user
}
model User {
  id           BigInt      @id @default(autoincrement())
  email        String   @unique @db.VarChar(100)
  platform     platform_type? // ENUM: kakao google naver 
  name         String   @db.VarChar(30)
  nickname     String   @db.VarChar(100)
  type         user_type  // ENUM: memo or category 
  introduction String   @db.VarChar(300)
  link         String   @db.VarChar(100)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relationships
  planners          Planner[]
  task_categories    Task_Category[]
  searches         Search[]
  friends_to         Friend[]            @relation("UserToFriends")
  friends_from       Friend[]            @relation("FriendsToUser")
  //shared_planners    Shared_Planner[]
  notices           Notice[]
  likes             Like[]             @relation("LikeToUser")
  from_likes        Like[]             @relation("LikeFromUser")
  avatars           Avatar[]
  posts             Post[]
  comments          Comment[]
  //shared_planner_view Shared_Planner_View[]

  @@map("user")
}

model Planner {
  id          BigInt      @id @default(autoincrement())
  user_id      BigInt
  planner_date DateTime @db.Date    //날짜정보만 저장 
  is_completed Boolean
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt   //자동시간 업데이트 

  // Relationships
  user           User            @relation(fields: [user_id], references: [id])
  tasks          Task[]
  //shared_planners Shared_Planner[]

  @@map("planner")
}

model Task {
  id             BigInt      @id @default(autoincrement())
  planner_id      BigInt
  task_category_id BigInt?
  title          String   @db.VarChar(100)
  is_completed    Boolean
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  // Relationships
  planner      Planner       @relation(fields: [planner_id], references: [id])
  task_category Task_Category? @relation(fields: [task_category_id], references: [id])

  @@map("task")
}

model Task_Category {
  id        BigInt      @id @default(autoincrement())
  user_id    BigInt
  name      String      @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime  @updatedAt
  // Relationships
  user  User   @relation(fields: [user_id], references: [id])
  tasks Task[]

  @@map("task_category")
}

model Search {
  id        BigInt      @id @default(autoincrement())
  user_id    BigInt
  content   String      @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime  @updatedAt
  // Relationships
  user User @relation(fields: [user_id], references: [id])

  @@map("search")
}

model Friend {
  id         BigInt      @id @default(autoincrement())
  to_user_id   BigInt
  from_user_id BigInt
  created_at  DateTime @default(now())

  // Relationships
  toUser   User @relation("UserToFriends", fields: [to_user_id], references: [id])
  fromUser User @relation("FriendsToUser", fields: [from_user_id], references: [id])

  @@map("friend")
}

/*
model Shared_Planner {
  id        BigInt       @id @default(autoincrement())
  planner_id BigInt
  user_id    BigInt
  status    share_status // ENUM: public, friend
  created_at DateTime  @default(now())
  expireAt  DateTime?

  // Relationships
  planner            Planner             @relation(fields: [planner_id], references: [id])
  user               User                @relation(fields: [user_id], references: [id])
  sharedPlannerViews Shared_Planner_View[]

  @@map("shared_planner")
}

model Shared_Planner_View {
  id              BigInt      @id @default(autoincrement())
  shared_planner_id BigInt
  user_id          BigInt
  viewedAt        DateTime

  // Relationships
  shared_planner Shared_Planner @relation(fields: [shared_planner_id], references: [id])
  user          User          @relation(fields: [user_id], references: [id])

  @@map("shared_planner_view")
}
*/
model Notice {
  id         BigInt         @id @default(autoincrement())
  user_id     BigInt
  is_read     Boolean
  message    String         @db.VarChar(100)
  entity_type notice_type // ENUM (post, comment, friend)
  entity_id   Int
  created_at  DateTime    @default(now())

  // Relationships
  user User @relation(fields: [user_id], references: [id])

  @@map("notice")
}

model Like {
  id         BigInt       @id @default(autoincrement())
  user_id     BigInt
  from_user_id BigInt
  entity_type like_post_type // ENUM (shared_planner, post)
  entity_id   Int
  created_at  DateTime  @default(now())

  // Relationships
  user     User @relation(name: "LikeToUser", fields: [user_id], references: [id])
  from_user User @relation(name: "LikeFromUser", fields: [from_user_id], references: [id])

  @@map("like")
}

model Avatar {
  id        BigInt      @id @default(autoincrement())
  user_id    BigInt
  imageUrl  String      @db.VarChar(100)
  created_at DateTime @default(now())

  // Relationships
  user User @relation(fields: [user_id], references: [id])

  @@map("avatar")
}

model Post {
  id            BigInt          @id @default(autoincrement())
  user_id        BigInt
  post_type     moment_story_type // ENUM (moment, story)
  title         String          @db.VarChar(100) 
  status        share_status // ENUM (public, friend, draft)
  text_align     align_type // ENUM (left, center, right)
  liking_count   BigInt       @default(0)
  comment_count  BigInt       @default(0)
  published_at   DateTime?
  created_at     DateTime     @default(now())
  updated_at     DateTime      @updatedAt
  // Relationships
  user     User      @relation(fields: [user_id], references: [id])
  
  comments Comment[]
  moment   Moment?   @relation("post_to_moment")
  story    Story?    @relation("post_to_story")
  @@map("post")
}

model Moment {
  id        BigInt      @id @default(autoincrement())
  post_id    BigInt     @ unique // 1대1 
  content   String      @db.VarChar(500)
  created_at DateTime @default(now())

  // Relationships
  post            Post  @relation("post_to_moment", fields: [post_id], references: [id])
  moment_contents Moment_Content[]

  @@map("moment")
}

model Moment_Content {
  id        BigInt    @id @default(autoincrement())
  moment_id  BigInt
  url       String    @db.VarChar(100)
  sort_order Int      //sort order 최대 5

  // Relationships
  moment Moment @relation(fields: [moment_id], references: [id])

  @@map("moment_content")
}

model Story {
  id        BigInt      @id @default(autoincrement())
  post_id    BigInt     @unique    //1대1
  created_at DateTime @default(now())

  // Relationships
  post  Post  @relation("post_to_story", fields: [post_id], references: [id])
  story_contents Story_Content[]

  @@map("story")
}

model Story_Content {
  id          BigInt    @id @default(autoincrement())
  story_id     BigInt
  content_type story_content_type //ENUM: video image
  content_data String   @db.Text  //글자수 제한 없음 
  sort_order   Int

  // Relationships
  story Story @relation(fields: [story_id], references: [id])

  @@map("story_content")
}

model Comment {
  id        BigInt      @id @default(autoincrement())
  post_id    BigInt
  user_id    BigInt
  content   String      @db.VarChar(500)
  created_at DateTime @default(now())
  updated_at DateTime  @updatedAt
  // Relationships
  post Post @relation(fields: [post_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@map("comment")
}
